name: Code Coverage

on:
  pull_request:
  push:
    paths-ignore:
      - '.github/workflows/linux.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/msys2.yml'
      - '.github/workflows/wasm.yml'
      - '.github/workflows/windows.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'CHANGELOG.md'
      - 'README.md'

jobs:
  build:
    name: ${{ matrix.config.name }}
    strategy:
      matrix:
        config:
        - { name: "Windows x64", os: windows-latest, arch: x64 }
        - { name: "Ubuntu x86_64", os: ubuntu-latest, arch: x86_64 }

    runs-on: ${{ matrix.config.os }}
    if: "!contains(github.event.head_commit.message, 'coverage skip')"

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install gcovr
        pip3 install conan

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y OpenCppCoverage
        choco install -y conan

    - name: Set xmake env (Linux)
      if: runner.os == 'Linux'
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV

    - name: Set xmake env (Windows)
      if: runner.os == 'Windows'
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: branch@dev
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    - name: Update xmake repository
      run: xmake repo --update

    - name: Retrieve dependencies hash
      if: runner.os == 'Linux'
      id: dep_hash_linux
      run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT

    - name: Retrieve dependencies hash
      if: runner.os == 'Windows'
      id: dep_hash_windows
      run: echo "hash=$(xmake l utils.ci.packageskey)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Retrieve cached xmake dependencies (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
        key: Linux-${{ matrix.config.arch }}-coverage-${{ steps.dep_hash_linux.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    - name: Retrieve cached xmake dependencies (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: ${{ env.XMAKE_GLOBALDIR }}\.xmake\packages
        key: MSVC-${{ matrix.config.arch }}-coverage-${{ steps.dep_hash_windows.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

    - name: Configure xmake and install dependencies
      run: xmake config --arch=${{ matrix.config.arch }} --mode=coverage --ccache=n --tests=y --yes -v

    - name: Build
      run: xmake --yes -v

    - name: Run unit tests and generate coverage output (Linux)
      if: runner.os == 'Linux'
      # Runs all tests. `xmake run hello_world` to run a single test
      run: |
        xmake run -g tests - -r tap
        gcovr -x coverage.out -s -f 'include/.*' -f 't/.*' -f 'src/.*' build/.objs/

    - name: Run unit tests and generate coverage output (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      # Runs all tests. `xmake run hello_world` to run a single test
      run: |
        "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --export_type cobertura:coverage.out --sources "include" --sources "t" --sources "src" --cover_children -- xmake run --group=tests

    - name: Upload Coverage Report to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        #~ files: ./coverage1.xml,./coverage2.xml # optional
        flags: unittests # optional
        name: codecov-${{ matrix.config.name }} # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)
